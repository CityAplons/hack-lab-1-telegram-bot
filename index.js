"use strict";
const {readFileSync} = require('fs')
const {Telegraf} = require('telegraf')
const {
    Extra,
    Markup,
    Stage
  } = Telegraf
const {MenuTemplate, MenuMiddleware, createBackMainMenuButtons} = require('telegraf-inline-menu')
const LocalSession = require('telegraf-session-local')

const bot = new Telegraf("TG_TOKEN")

/*
 * User local database
 */
bot.use((new LocalSession({ database: '_users_db.json' })).middleware())

/*
 * Scenes (Quest, Buildings)
 */
const SceneGenerator = require('./scenes')
const curScene = new SceneGenerator()
const questScene = curScene.genQuestScene()
const boolQuestScene = curScene.genBoolQuestScene()
const luckScene = curScene.genluckScene()

const stage = new Stage([questScene, boolQuestScene, luckScene])
stage.command('home', async (ctx) => {
    await ctx.scene.leave()
    ctx.reply('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ–º–æ–π')
    menuMiddleware.replyToContext(ctx)
})
bot.use(stage.middleware())

/*
 * User interface
 */

const menuTemplate = new MenuTemplate(ctx => `
üëã–ü—Ä–∏–≤–µ—Ç, –∫–∞–ø–∏—Ç–∞–ª–∏—Å—Ç!
üí™–•–æ—á–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –≤ —Ñ–∏–Ω–∞–Ω—Å–∞—Ö –∏ —É–∑–Ω–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã?  
‚õîÔ∏è–ù–µ –±–æ–∏—à—å—Å—è –æ—Å—Ç–∞—Ç—å—Å—è –Ω–∏ —Å —á–µ–º?
üí∞–ì–æ—Ç–æ–≤ –∑–∞ –∫–æ—Ä–æ—Ç–∫–∏–π —Å—Ä–æ–∫ —Å—Ç–∞—Ç—å –º–∏–ª–ª–∏–æ–Ω–µ—Ä–æ–º?

–ï—Å–ª–∏ –¥–∞, —Ç–æ —ç—Ç–∞ –∏–≥—Ä–∞ –¥–ª—è —Ç–µ–±—è! 
üëÄ–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ /instructions `)

//States
let mainMenuToggle = false
let luckButtonToggle = false
let statsMenuToggle = false

/*
 * Player data
 */
const fields = JSON.parse(readFileSync('_data_db.json'));
const levelFields = fields.levels
const baselFields = fields.bases
/*
 * Statistics submenu
 */
const statsMenu = new MenuTemplate((ctx) => {
    if (ctx.session.lastVision) {
        let add = Math.floor(parseFloat(new Date() - new Date(ctx.session.lastVision))/1000)*ctx.session.multiplier*Math.pow(5,(ctx.session.leve-1))
        if(!isNaN(add)) ctx.session.coinsAmount += add
        ctx.session.lastVision = new Date();
    }
    return `–¢–æ–∫–µ–Ω—ã: ${ctx.session.coinsAmount}üü°\n–ú–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã: ${baselFields[ctx.session.base].name}\n–ë–æ–Ω—É—Å–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å: ${baselFields[ctx.session.base].rate}\n–¢–≤–æ–π —É—Ä–æ–≤–µ–Ω—å: ${ctx.session.level} - ${levelFields[ctx.session.level-1].role}
${levelFields[ctx.session.level].description}`;
})
statsMenu.manualRow(createBackMainMenuButtons("–ù–∞–∑–∞–¥", "–í –º–µ–Ω—é"))
menuTemplate.submenu('–ü—Ä–æ–≥—Ä–µ—Å—Å', 'amount', statsMenu, {
	hide: () => mainMenuToggle
})

/*
 * Upgrade submenu
 */
const upgradeMenu = new MenuTemplate((ctx) => {
    return `–û–±–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ - ${baselFields[ctx.session.base+1].name} ${baselFields[ctx.session.base+1].price}üü°`;
})
upgradeMenu.interact('–ö—É–ø–∏—Ç—å', 'buyUpgradeBase', {
    do: async ctx => {
        if(ctx.session.coinsAmount >= baselFields[ctx.session.base+1].price) {
            ctx.session.coinsAmount -= baselFields[ctx.session.base+1].price
            ctx.session.base += 1
            ctx.session.multiplier = baselFields[ctx.session.base].rate;
            ctx.reply(`–í—ã –ø–µ—Ä–µ—Ö–∞–ª–∏ –≤ ${baselFields[ctx.session.base].name}, —Ç–µ–ø–µ—Ä—å –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –≤ —Ö${baselFields[ctx.session.base].rate} —Ä–∞–∑ –≤—ã—à–µ!`)
        } else {
            ctx.reply(`–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤! üò°`)
        }
    
        return true;
    }
})
upgradeMenu.manualRow(createBackMainMenuButtons("–ù–∞–∑–∞–¥", "–í –º–µ–Ω—é"))
statsMenu.submenu('–û–±–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ', 'upgradeBase', upgradeMenu, {
	hide: () => statsMenuToggle
})

/*
 * Play submenu
 */
const playMenu = new MenuTemplate(ctx => {
    if ((new Date() - new Date(ctx.session.lastLuckRun)) >= 120000) luckButtonToggle = false
    else luckButtonToggle = true
    return `–í–∞—à –±–∞–ª–∞–Ω—Å: ${ctx.session.coinsAmount}üü°\nüïπüéÆ–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–≤–æ–π —Ä–µ–∂–∏–º –∏ –∑–∞–ø–ª–∞—Ç–∏—Ç–µ –∑–∞ —É—á–∞—Å—Ç–∏–µ –∏–∑ —Å–≤–æ–µ–≥–æ –∫–∞—Ä–º–∞–Ω–∞üí∏!\n‚ùì‚ùì–í–æ–ø—Ä–æ—Å: 150üü°\nüü¢üî¥–ü—Ä–∞–≤–¥–∞ –∏–ª–∏ –õ–æ–∂—å: 10üü°\nüéØüé≤–ò—Å–ø—ã—Ç–∞—Ç—å —Ñ–æ—Ä—Ç—É–Ω—É: –¥–æ—Å—Ç—É–ø–Ω–æ 1 —Ä–∞–∑ –≤ –¥–µ–Ω—åüï∞`
})
playMenu.interact('–í–æ–ø—Ä–æ—Å—ã', 'quest', {
    do: async ctx => {
        ctx.reply(`–ß—Ç–æ–±—ã –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –ø–∏—à–∏—Ç–µ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 4. \n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /home –¥–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é`)
        ctx.scene.enter('quest')
        return true;
    }
})
playMenu.interact('–ü—Ä–∞–≤–¥–∞/–õ–æ–∂—å', 'boolQuest', {
    do: async ctx => {
        ctx.reply(`–ß—Ç–æ–±—ã –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –æ—Ç–≤–µ—á–∞–π—Ç–µ –î–∞ –∏–ª–∏ –ù–µ—Ç. \n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /home –¥–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é`)
        ctx.scene.enter('boolQuest')
        return true;
    }
})
playMenu.interact('–ò—Å–ø—ã—Ç–∞—Ç—å —Ñ–æ—Ä—Ç—É–Ω—É', 'luck', {
    hide: () => {
        if (luckButtonToggle) return true 
        else return false;
    },
    do: async ctx => {
        luckButtonToggle = true
        ctx.scene.enter('luck')
        return true;
    }
})
playMenu.manualRow(createBackMainMenuButtons("–ù–∞–∑–∞–¥", "–í –º–µ–Ω—é"))
menuTemplate.submenu('–ò–≥—Ä–∞—Ç—å', 'play', playMenu, {
	hide: () => mainMenuToggle
})

/*
 * Level progression
 */
bot.use(async (ctx, next) => {
    if (ctx.session.level) {
        if(ctx.session.wins >= levelFields[ctx.session.level-1].wins) {
            ctx.session.level += 1
            ctx.reply(`üéâ –í–∞—à —É—Ä–æ–≤–µ–Ω—å –≤—ã—Ä–æ—Å! –¢–µ–ø–µ—Ä—å –≤—ã ${levelFields[ctx.session.level-1].role} üéâ`)
            ctx.session.wins = 0
        }
    }
    return next();
})

/*
 * Bot reactions
 */
const menuMiddleware = new MenuMiddleware('/', menuTemplate)
bot.command('start', ctx => {
    ctx.session.coinsAmount = ctx.session.coinsAmount || 200;
    ctx.session.wins = ctx.session.wins || 0;
    ctx.session.base = ctx.session.base || 0;
    ctx.session.level = ctx.session.level || 1;
    ctx.session.multiplier = baselFields[ctx.session.base].rate;
    ctx.session.lastVision = ctx.session.lastVision || new Date();
    ctx.session.lastLuckRun = ctx.session.lastLuckRun || new Date();
    ctx.session.restart_quest = true
    ctx.session.restart_tf = true
    menuMiddleware.replyToContext(ctx)
})
bot.use(menuMiddleware)
bot.command('instructions',(ctx) => ctx.reply(`–í —ç—Ç–æ–π –∏–≥—Ä–µ —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–µ–Ω—å–≥–∏ –∏ —Ä–∞–∑–≤–∏–≤–∞—Ç—å —Å–≤–æ–π –±–∏–∑–Ω–µ—Å!
–î–ª—è –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è –Ω—É–∂–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å ${levelFields[ctx.session.level-1].wins - ctx.session.wins} —Ä–∞–∑`))
bot.on('sticker', (ctx) => ctx.reply('üëç'))
bot.hears('–ø—Ä–∏–≤–µ—Ç', (ctx) => ctx.reply('–ù—É –∑–¥–∞—Ä–æ–≤–∞, –º–µ—á–µ–Ω–Ω—ã–π'))
bot.launch()